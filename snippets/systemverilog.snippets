# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet assign
assign ${1:var} = ${2:value};$0
endsnippet

snippet force
force ${1:var} = ${2:value};$0
endsnippet

snippet always
always @(${1:sensitivity_list})
begin
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet always_ff
always_ff @(posedge ${1:clk} or negedge ${2:rst_n})
begin
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet always_latch
always_latch
begin
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet always_comb
always_comb
begin
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet if
if (${1:condition})
begin${2:: block_name}
	${3:pass}
end
endsnippet

snippet if/else
if (${1:condition})
begin${2:: block_name}
	${3:pass}
end
else
begin${4:: block_name}
	${5:pass}
end
endsnippet

snippet else if
else if (${1:condition})
begin${2:: block_name}
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet else
else
begin${1:: block_name}
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet case
case (${1:variable})
	${0:${TM_SELECTED_TEXT}}
endcase
endsnippet

snippet case/default
case (${1:variable})
	${0:${TM_SELECTED_TEXT}}
	default:
	begin${2:: block_name}
		${3:default_case}
	end
endcase
endsnippet

snippet while
while (${1:expression})
begin
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet for
for (int ${1:i}=0; ${1:i}<${2:MAX}; ++${1:i})
begin${3:: block_name}
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet foreach
foreach (${1:arr}[${2:i}])
begin
	${0:${TM_SELECTED_TEXT}}
end
endsnippet

snippet function
function ${1:return_value} ${2:name}(${3:port_list});
	${0:${TM_SELECTED_TEXT}}
endfunction
endsnippet

snippet task
task ${1:name}(${2:port_list});
	${0:${TM_SELECTED_TEXT}}
endtask
endsnippet

snippet class
class ${1:name};
	${0:${TM_SELECTED_TEXT}}
endclass
endsnippet

snippet class/extends
class ${1:name} extends ${2:super};
	function new();
		${0:${TM_SELECTED_TEXT}}
	endfunction
endclass
endsnippet

snippet program
program ${1:name}(${2:port_list});
	${0:${TM_SELECTED_TEXT}}
endprogram
endsnippet

snippet module
module ${1:name} (
	${2:port_list}
);
	${0:${TM_SELECTED_TEXT}}
endmodule
endsnippet

snippet module #(
module ${1:name} #(
	${2:parameters}
) (
	${3:port_list}
);
	${0:${TM_SELECTED_TEXT}}
endmodule
endsnippet

snippet assert
${1:label}: assert (${2:test})
	else \\$error(\${0:Assertion ${1:label} failed!}\);
endsnippet

snippet property
property ${1:name};
	@(posedge ${2:clk}) ${0:test}
endproperty
endsnippet

prefix:Â generate
generate
	${0:${TM_SELECTED_TEXT}}
endgenerate
endsnippet

snippet typedef/struct
typedef struct packed {
	${0:${TM_SELECTED_TEXT}}
} ${1:name};
endsnippet

snippet typedef/enum
typedef enum ${1:type} { ${0:${TM_SELECTED_TEXT}} } ${2:name};
endsnippet

snippet interface
interface ${1:name};
	${0:${TM_SELECTED_TEXT}}
endinterface
endsnippet

snippet ter
$1 ? $2 : $3
endsnippet

snippet reg
reg $1;$0
endsnippet

snippet rega
reg [$1:$2] $3;$0
endsnippet

snippet regm
reg [$1:$2] $3 [$4:$5];$0
endsnippet

snippet wire
wire $1;$0
endsnippet

snippet wirea
wire [$1:$2] $3;$0
endsnippet

snippet logic
logic $1;$0
endsnippet

snippet logica
logic [$1:$2] $3;$0
endsnippet

snippet array
[${1:8}:${2:0}]$0
endsnippet

snippet assoc
${1:type} ${2:name}[${3:index_type}];$0
endsnippet

snippet separator
// -------------------------------------------------------\n$0
endsnippet

snippet heading
// -------------------------------------------------------
// -- ${1:heading}
// -------------------------------------------------------\n$0
endsnippet

snippet heading+description
// -------------------------------------------------------
// -- ${1:heading}
// -------------------------------------------------------
// ${2:description}
// -------------------------------------------------------\n$0


